#+TITLE: My Emacs Configuration
#+PROPERTY: header-args :tangle config.el
#+OPTIONS: toc:2

** TABLE OF CONTENTS                                                    :toc:
  - [[#info][INFO]]
  - [[#package-management][Package management]]
  - [[#basic-changes][Basic changes]]
  - [[#org-mode][org mode]]
  - [[#toc-for-org][toc for org]]
  - [[#org-roam][org roam]]
  - [[#theme][Theme]]
  - [[#doom-modeline][doom modeline]]
  - [[#evil-vim][evil vim]]
  -  [[#perspective-mode][perspective mode]]
  - [[#emacs-as-ide][Emacs as IDE]]
  - [[#flycheck][flycheck]]
  - [[#ivy-completion][Ivy (completion)]]
  - [[#vterm][vterm]]
  - [[#magit][magit]]
  - [[#personal-functions][Personal functions]]
  - [[#which-key][which key]]
  - [[#windswap][Windswap]]
  - [[#keybindings][Keybindings]]

** INFO
create source blocks with ~org-insert-structure-template~ Keybinding: ~(C-c C-,)~
~C-c C-c~ on tangle header activates it if it isn't working.
To edit the current source block in new buffer use ~C-c '~

** Package management
Uses straight for fast lazy loading with use-package automatically using straight
This I will keep in the init.el for now though so it loads first.

** Basic changes
#+begin_src emacs-lisp
  ;; Don't show the splash screen
  (setq inhibit-startup-message t)

  ;; change the look
  (tool-bar-mode -1) ; remove tool bar
  (scroll-bar-mode -1) ; remove scroll bar
  (menu-bar-mode -1) ; remove menu bar
  (global-display-line-numbers-mode 1)

  ;; enable recent files
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)

  ;;(setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
#+end_src

** org mode
Even though org mode is preinstalled this ensures there is no org mode mismatch
#+begin_src emacs-lisp
  (use-package org)
#+end_src

** toc for org
#+begin_src emacs-lisp

  (use-package toc-org)
  (add-hook 'org-mode-hook 'toc-org-mode)
  (setq org-return-follows-link t)
  ;; enable in markdown, too
  ;;(add-hook 'markdown-mode-hook 'toc-org-mode)
  ;;(define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point)

#+end_src

** org roam
[[https://github.com/bastibe/org-journal][org journal github]] is not being used, instead org roam dailies

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t) ;;acknowledges that version 2 of org roam is being used
    :custom
    (org-roam-directory "~/Sync/org/roam/")
    (org-roam-completion-everywhere t)
    ;; add keybindings here
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode))
#+end_src

** Theme
#+begin_src emacs-lisp 
  ;; theme
  (use-package doom-themes) ;; https://github.com/doomemacs/themes/tree/screenshots
  ;; (load-theme 'doom-oceanic-next t)
  ;; (load-theme 'doom-molokai t)
  ;; (load-theme 'doom-palenight t)
  (load-theme 'doom-snazzy t)
  ;; (load-theme 'doom-wilmersdorf t)
  ;; (load-theme 'doom-outrun-electric t)
#+end_src

** doom modeline
https://github.com/seagle0128/doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

** evil vim
#+begin_src emacs-lisp 
    ;; https://github.com/emacs-evil/evil
  (use-package evil
       :init (setq evil-want-C-i-jump nil)
       :config (evil-mode))

  ;; required packages
  (use-package goto-chg)
  (require 'evil)
  (evil-mode 1)
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

**  perspective mode

- ~s~          : persp-switch: Query a perspective to switch to, or create
- ~`~          : persp-switch-by-number: Switch to perspective by number, or switch quickly using numbers 1, 2, 3.. 0 as prefix args; note this will probably be most useful with persp-sort set to 'created
- ~k~          : persp-remove-buffer: Query a buffer to remove from current perspective
- ~c~          : persp-kill : Query a perspective to kill
- ~r~          : persp-rename: Rename current perspective
- ~a~          : persp-add-buffer: Query an open buffer to add to current perspective
- ~A~          : persp-set-buffer: Add buffer to current perspective and remove it from all others
- ~b~          : persp-switch-to-buffer: Like switch-to-buffer; includes all buffers from all perspectives; changes perspective if necessary
- ~i~          : persp-import: Import a given perspective from another frame.
- ~n, <right>~ : persp-next: Switch to next perspective
- ~p, <left>~  : persp-prev: Switch to previous perspective
- ~m~          : persp-merge: Temporarily merge the buffers from one perspective into another
- ~u~          : persp-unmerge: Undo the effects of a persp-merge
- ~g~          : persp-add-buffer-to-frame-global: Add buffer to a frame-specific "global" perspective
- ~C-s~        : persp-state-save: Save all perspectives in all frames to a file
- ~C-l~        : persp-state-load: Load all perspectives from a file

#+begin_src emacs-lisp
(use-package perspective
  :bind
  ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))  ; will be changed later
  :init
  (persp-mode))
#+end_src

** Emacs as IDE
[[https://ianyepan.github.io/posts/emacs-ide/][General tips on how to make emacs a good ide]]
*** Language server protocol (lsp-mode)

# arch link https://wiki.archlinux.org/title/Language_Server_Protocol
I have disabled many annoying functions of lsp-ui
Here a diagramm of their functions: https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/ 

#+begin_src emacs-lisp
  ;; https://emacs-lsp.github.io/lsp-mode/page/installation/
  (use-package lsp-mode
  :hook ((c-mode          ; clangd
	  c++-mode        ; clangd
	  c-or-c++-mode   ; clangd
	  java-mode       ; eclipse-jdtls
	  js-mode         ; ts-ls (tsserver wrapper)
	  js-jsx-mode     ; ts-ls (tsserver wrapper)
	  typescript-mode ; ts-ls (tsserver wrapper)
	  python-mode     ; pyright
	  web-mode        ; ts-ls/HTML/CSS
	  haskell-mode    ; haskell-language-server
	  ) . lsp-deferred)
  :commands lsp
  :config
  (setq lsp-auto-guess-root t)
  (setq lsp-log-io nil)
  (setq lsp-restart 'auto-restart)
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-enable-on-type-formatting nil)
  (setq lsp-signature-auto-activate nil)
  (setq lsp-signature-render-documentation nil)
  (setq lsp-eldoc-hook nil)
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-semantic-tokens-enable nil)
  (setq lsp-enable-folding nil)
  (setq lsp-enable-imenu nil)
  (setq lsp-enable-snippet nil)
  (setq read-process-output-max (* 1024 1024)) ;; 1MB
  (setq lsp-idle-delay 0.5))

  (use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-show-diagnostics t)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-show-with-cursor t)
  (setq lsp-ui-doc-show-with-mouse nil)
  (setq lsp-ui-sideline-delay 0.05))
  (setq lsp-lens-enable nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-ui-sideline-enable t)
#+end_src

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src

*** python
#+begin_src emacs-lisp
  (use-package lsp-pyright
  :hook (python-mode . (lambda () (require 'lsp-pyright)))
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3")))
#+end_src

*** java
#+begin_src emacs-lisp
  (use-package lsp-java
  :after lsp)
#+end_src

*** enable docker syntax highlighting
#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src

*** enable company
#+begin_src emacs-lisp
  ;; http://company-mode.github.io/
  (use-package company)
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src


** Ivy (completion)
#+begin_src emacs-lisp
  ;; Ivy (completion) https://github.com/abo-abo/swiper
  (use-package ivy)
  (use-package counsel)
  (ivy-mode)
  (counsel-mode)
  (setq ivy-initial-inputs-alist nil) ;; removes annoying ^ from commands
#+end_src

** vterm
#+begin_src emacs-lisp
   (use-package vterm
   :ensure t)
  ;; ensure that vterm has no line numbers

  (add-hook 'vterm-mode-hook (lambda() (display-line-numbers-mode -1))) 
  (use-package vterm-toggle) ;; better vterm behaviour https://github.com/jixiuf/vterm-toggle
#+end_src

** magit
#+begin_src emacs-lisp
    (use-package magit)
#+end_src

** Personal functions
#+begin_src emacs-lisp
  ;; personal functions
  (defun reload-config ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (defun edit-config ()
    (interactive
    (find-file "~/.emacs.d/config.org")))

  (defun er-sudo-edit (&optional arg)
  "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
			 (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src

** which key
#+begin_src emacs-lisp
  ;; https://github.com/justbur/emacs-which-key
  (use-package which-key)
  (require 'which-key)
  (which-key-mode)
#+end_src

** Windswap
#+begin_src emacs-lisp
  ;; Windmove
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)
  ; basically ctrl direction moves to that window, with shift moves that window there
#+end_src

** Keybindings
#+begin_src emacs-lisp
  ;; new keybindings
  (use-package general
    :after evil
    :config
    (general-override-mode)
    )
  (require 'general)

  (general-create-definer my-leader-def
    :states '(normal emacs motion)
    :keymaps 'override
    :prefix "SPC"
    )
#+end_src

*** file keybindings  
#+begin_src emacs-lisp 

  ;; magit uses emacs mode so emacs is important to override magit
  (my-leader-def
    ;;:states '(emacs normal)
    ;;:keymaps 'override
    ;; files
    "f s" 'save-buffer
    "." 'find-file
    "f f" 'er-sudo-edit
    "f r" 'recentf-open
#+end_src

*** window keybindings
#+begin_src emacs-lisp 
    ;; window commands
    "w d" 'evil-window-delete
    "w H" 'evil-window-split 
    "w v" 'evil-window-vsplit
    "w j" 'evil-window-up
    "w k" 'evil-window-down
    "w h" 'evil-window-left
    "w l" 'evil-window-right
#+end_src

*** config keybindings
#+begin_src emacs-lisp 
    ;; config commands
    "c r" 'reload-config
    "c e" 'edit-config
#+end_src
*** vterm keybindings
#+begin_src emacs-lisp 
    ;; vterm
    "o t" 'vterm-toggle-cd
#+end_src

*** magit keybindings
#+begin_src emacs-lisp 
    ;; magit
    "g g" 'magit-status
    "g d" 'magit-dispatch
    "g f" 'magit-file-dispatch
#+end_src

*** treemacs keybindings
#+begin_src emacs-lisp 
    ;;treemacs
    "t t" 'treemacs
    "t DEL" 'treemacs-root-up
    "t RET" 'treemacs-root-down
#+end_src

*** org roam keybindings
#+begin_src emacs-lisp
    "r n f" 'org-roam-node-find
    "r n i" 'org-roam-node-insert
    "r b t" 'org-roam-buffer-toggle
    "r d y" 'org-roam-dailies-capture-yesterday
    "r d t" 'org-roam-dailies-capture-tomorrow
    "r d n" 'org-roam-dailies-capture-today
    "r d g" 'org-roam-dailies-goto-today
#+end_src

*** pers mode keybindings
#+begin_src emacs-lisp
    ;; perspective mode
    "p" 'perspective-map
    )
#+end_src

*** treemacs which key descriptors
#+begin_src emacs-lisp 
    ;; change which key description
    (which-key-add-key-based-replacements
      "SPC f" "files")
    (which-key-add-key-based-replacements
      "SPC c" "config")
    (which-key-add-key-based-replacements
      "SPC w" "window")
    (which-key-add-key-based-replacements
      "SPC o" "vterm")
    (which-key-add-key-based-replacements
      "SPC g" "magit")
    (which-key-add-key-based-replacements
      "SPC t" "treemacs")
    (which-key-add-key-based-replacements
      "SPC r" "org-roam")
    (which-key-add-key-based-replacements
      "SPC r d" "roam-dailies")
    (which-key-add-key-based-replacements
      "SPC r n" "roam node")
    (which-key-add-key-based-replacements
      "SPC r b" "roam buffer")
#+end_src

;;; Local Variables: ***
;;; eval: (add-hook 'after-save-hook #'org-babel-tangle nil t) ***
;;; End: ***
